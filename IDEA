Mon Jan 22 19:02:03 PST 2018

                               -- Term::CLI::Argument::Enum
                              /
             -- Term::CLI::Argument::String
            /                 \
           /                   -- Term::CLI::Argument::FileName
Term::CLI::Argument
           \
            -- Term::CLI::Argument::Number -- Term::CLI::Argument::Integer


Sun  9 Apr 22:34:48 CEST 2017

Syntax is built using objects.

Term::CLI::Parser;
Term::CLI::Command
Term::CLI::Option
Term::CLI::Argument
Term::CLI::SubCommand

my $parser = Term::CLI->new();

    my $cmd_1 = Term::CLI::Command->new(
        name      => 'copy',
        options   => [ 'verbose!' ],
        callback  => sub {
            my ($self, $args, $opts) = @_;
            say "Copy $$args{src} to $$args{dst}";
            return 1;
        },
        arguments => [
            Term::CLI::Argument::FName->new(name => 'src'),
            Term::CLI::Argument::FName->new(name => 'dst'),
        ],
    );

    $parser->add_command($cmd_1);

Alternative:

    my $cmd_1 = Term::CLI::Command->new(
        name      => 'copy',
        options   => [ 'verbose!' ],
        callback  => sub {
            my ($self, $args, $opts) = @_;
            my @src = @{$$args{src}}
            say "Copy (@src) to $$args{dst}";
            return 1;
        },
        arguments => [
            Term::CLI::Argument::FName->new(name => 'src', max_occurrence => -1),
            Term::CLI::Argument::FName->new(name => 'dst'),
        ],
    );

    $parser->add_command($cmd_1);

Using subcommands:

    my $cmd_2 = Term::CLI::Command->new(
        name      => 'show',
    );

    my $sub_cmd_1 = Term::CLI::SubCommand->new(
        name      => 'clock',
        callback  => sub { system('date') },
    );

    my $sub_cmd_2 = Term::CLI::SubCommand->new(
        name      => 'env',
        callback  => sub {
            my ($self, \%args, \%opts) = @_;
            my $varname = $$args{varname};
            say "'$varname' = '". $::ENV{$varname} // ''."'";
            return 1;
        },
        arguments => [
            Term::CLI::Argument::String(name => 'varname');
        ]
    );

    $parser->add_command($sub_cmd_1, $sub_cmd_2);

* Having sub-commands AND arguments is not allowed.
* Completion and validation can be done easily.
